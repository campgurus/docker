<?php

namespace Neoan3\Component\Outlets;

use Neoan3\Apps\CurlException;
use Neoan3\Core\RouteException;
use Neoan3\Frame\Demo;
use Neoan3\Model\Contact\ContactModel;
use Neoan3\Model\Outlet\OutletModel;
use Neoan3\Model\Outlet\OutletModelWrapper;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\Model\InitModel;

/**
 * Class OutletsController
 * @package Neoan3\Component\Outlets
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */

class OutletsController extends Demo{

    /**
    * GET: api.v1/outlets
    * GET: api.v1/outlets/{id}
    * GET: api.v1/outlets?{query-string}
    * @param string|null $id
    * @param array $params
    * @return array
    */
    #[InitModel(OutletModel::class)]
    #[Authorization('restrict')]
    function getOutlets(?string $id = null, array $params = []): array
    {
        // Restrict access to logged in users?
//        $this->Auth->restrict();
        // (or without dependency on Demo-Frame: $this->provider['auth']->restrict())
        if($id){
            return OutletModel::get($id);
        }
        return OutletModel::find([]);
    }

    /**
     * POST: api.v1/outlets
     * @param $body
     * @return array
     * @throws RouteException
     */
    #[InitModel(OutletModel::class)]
    function postOutlets($body): array
    {
        try {
            $data = $this->getMeta($body['website']);
            return OutletModel::create([
                'name' => $data['title'],
                'description' => $data['description'],
                'image_url' => $data['image'],
                'website' => $body['website']
            ]);
        } catch(CurlException $e) {
            throw new RouteException($e->getMessage(), 400);
        }
    }

    /**
     * PUT: api.v1/outlets/{id}
     * @param string|null $id
     * @param array $body
     * @return array
     * @throws \Exception
     */
    #[InitModel(OutletModel::class)]
    #[Authorization('restrict')]
    // everything before the last parameter is a string in the url
    function putOutlets(?string $id = null, array $body = []): array
    {
        $update = new OutletModelWrapper($body);
        return $update->store('update')->toArray();
    }
}
