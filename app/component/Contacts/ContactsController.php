<?php

namespace Neoan3\Component\Contacts;

use Neoan3\Component\ContactOutlet\ContactOutletController;
use Neoan3\Frame\Demo;
use Neoan3\Model\Contact\ContactModel;
use Neoan3\Model\Contact\ContactModelWrapper;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\Model\InitModel;

/**
 * Class ContactsController
 * @package Neoan3\Component\Contacts
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */

class ContactsController extends Demo{

    /**
    * GET: api.v1/contacts
    * GET: api.v1/contacts/{id}
    * GET: api.v1/contacts?{query-string}
    * @param string|null $id
    * @param array $params
    * @return array
    */
    #[InitModel(ContactModel::class)]
    #[Authorization('restrict')]
    function getContacts(?string $id = null, array $params = []): array
    {
        // Restrict access to logged in users?
//        $this->Auth->restrict();
        // (or without dependency on Demo-Frame: $this->provider['auth']->restrict())
        if($id){
            return ContactModel::get($id);
        }
        return ContactModel::find([]);
    }

    /**
     * POST: api.v1/contacts
     * @param array $body
     * @return array
     */
    #[InitModel(ContactModel::class)]
    function postContact(array $body): array
    {
        return ContactModel::create($body);
    }

    /**
     * PUT: api.v1/contacts/{id}
     * @param string|null $id
     * @param array $body
     * @return array
     * @throws \Exception
     */
    #[InitModel(ContactModel::class)]
    #[Authorization('restrict')]
    // everything before the last parameter is a string in the url
    function putContacts(?string $id = null, array $body = []): array
    {
        $update = new ContactModelWrapper($body);
        return $update->store('update')->toArray();
    }

    /**
     * @param string $id
     * @return array
     */
    #[InitModel(ContactModel::class)]
    function deleteContact(string $id): array
    {
        $connections = new ContactOutletController();
        $connections->deleteContactOutlet(["contact_id"=>$id]);
        return ContactModel::delete($id); //soft delete
    }
}
