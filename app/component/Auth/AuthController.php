<?php

namespace Neoan3\Component\Auth;

use Neoan3\Core\RouteException;
use Neoan3\Frame\Demo;
use Neoan3\Model\User\UserModel;
use Neoan3\Model\User\UserModelWrapper;
use Neoan3\Provider\Auth\Authorization;
use Neoan3\Provider\Model\InitModel;

/**
 * Class AuthController
 * @package Neoan3\Component\Auth
 *
 * Generated by neoan3-cli for neoan3 v3.*
 */

class AuthController extends Demo{

    /**
    * GET: api.v1/auth
    * GET: api.v1/auth/{id}
    * GET: api.v1/auth?{query-string}
    * @param string|null $id
    * @param array $params
    * @return array
    */
    #[Authorization('restrict')]
    function getAuth(): array
    {
        return $this->authObject->getPayload();
    }

    /**
     * POST: api.v1/auth
     * @param $body
     * @return array
     */
    #[InitModel(UserModel::class)]
    function postAuth( string $mode="Login", array $body=[] ): array
    {
        if ( $mode === 'Register') {
            // create user
            $newUser = new UserModelWrapper($body);
            try {
                $newUser->store()->rehydrate();
                $user = $newUser->toArray();
            } catch (\Exception $e) {
                throw new RouteException('Malformed input', 400);
            }
        } else {
            // try login
            $user = UserModel::login($body);
        }
        $authObject = $this->Auth->assign($user['id'], ['all'], ['email'=>$user['email']] );
        $user = UserModelWrapper::retrieveOne(['email'=>trim($body['email'])]);
        return [$user->toArray(), 'token' => $authObject->getToken()];
    }
}
